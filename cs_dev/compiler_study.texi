\input texinfo

@documentlanguage en
@documentencoding UTF-8

@settitle Compiler Sample Code Study

@copying
This manual is for Document, version 1.0.

Copyright @copyright{} years free time team.

@quotation
Permission is granted to
@end quotation
@end copying

@titlepage
@title name-of-manual-when-printed en
@subtitle subtitle-if-any
@subtitle second-subtitle
@author author

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

Published by
@end titlepage

@c So the toc is printed at the start.
@contents

@ifnottex
@node Top
@top compiler sample code study

This manual is for program, version version.
@end ifnottex

@menu
* mini_c::
* llvm_essential code::
* build from llvm source code::
* llvm tutorial::
@c * Copying::  free time team
@end menu

@node mini_c
@chapter mini_c
本节内容可以对照 《计算机系统开发与优化实战》第2.4节。

mini_c 是一个玩具编译器，它由5000行左右的C语言代码实现，便于学习。
这个编译器包括前端和后端两个部分，前端主要包括词法分析、语法分析、语义分析，以及与它们交互的符号表和错误处理等。
在后端，开发人员手动设计与实现了一个解释器，该解释器专门用于解释执行mini_c生成的仿8086汇编代码。

代码仓可以用以下命令clone下来:
@example
git clone https://gitee.com/zzyjsjcom/computer_dev
@end example

进入子目录 mini_c 就可以看到源代码了。

@example
cd mini_c
make run

cd front_end && make
make[1]: Entering directory '/home/zzy/disk2/practice/mini_c/front_end'
cc   -c -o main.o main.c
cc   -c -o scan.o scan.c
cc   -c -o parser.o parser.c
cc   -c -o tools.o tools.c
cc   -c -o code.o code.c
cc   main.o scan.o parser.o tools.o code.o   -o main
make[1]: Leaving directory '/home/zzy/disk2/practice/mini_c/front_end'
cd back_end && make
make[1]: Entering directory '/home/zzy/disk2/practice/mini_c/back_end'
cc   -c -o zm_main.o zm_main.c
cc   -c -o zm_exec.o zm_exec.c
cc   -c -o zm_loade.o zm_loade.c
gcc -o zm_main zm_main.o zm_exec.o zm_loade.o
make[1]: Leaving directory '/home/zzy/disk2/practice/mini_c/back_end'
cp front_end/main main && cp back_end/zm_main zm_main
./main test_proc.c
./zm_main
Please input a integer number:1

The result is 5050
@end example

@node llvm_essential code
@chapter llvm_essential code
本节内容可以对照 《计算机系统开发与优化实战》第2.5节。

《llvm essentials》这本书是学习llvm很不错的资料，但可惜的是这本书上的代码太老了，在新的编译器上编译不过。
首先通过下面的命令安装 clang-6 编译器，目前绝大部分的主流ubuntu版本，都支持 clang-6。但即使是clang-6 也会有很多代码编译不过。
@example
sudo apt-get install clang-6
@end example

首先使用以下命令 clone 代码仓:
@example
git clone https://gitee.com/zzyjsjcom/computer_dev
@end example
切换到目录：llvm_essentials_code，其中子目录 c1 代表第一章的代码，c2代表第二章的代码，依此类推。
目前 c1 ~ c3 的代码，都已经调试通过，直接切换到对应的目录，执行 make，就可以编译了。
这些都是很短小的代码，非常便于初学，前三章学完了，就可以到 llvm 官网跑更大型一点的例子了。

@node build from llvm source code
@chapter build from llvm source code

以 llvm 12.0.1 为例，通过如下命令源码编译 llvm，注意请将下面命令中的 /path/to/you 改成你自己的安装路径名。

@example
sudo apt-get install -y gcc g++ git cmake ninja-build
git clone https://github.com/llvm/llvm-project.git

# CMAKE_BUILD_TYPE=DEBUG
cd llvm-project
git checkout -b llvmorg-12.0.1 llvmorg-12.0.1
mkdir build
cd build

cmake -G Ninja -DCMAKE_BUILD_TYPE=RELEASE -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_PROJECTS="clang" \
        -DCMAKE_INSTALL_PREFIX=/path/to/you ../llvm

ninja # -j2
# ninja check-all
ninja install
@end example

@node llvm tutorial
@chapter llvm tutorial

@menu
* Kaleidoscope - a toy compiler::
* Building A JIT::
@c * Copying::  free time team
@end menu

@node Kaleidoscope - a toy compiler
@section Kaleidoscope - a toy compiler
@c @node Kaleidoscope - a toy compiler
@c @chapter Kaleidoscope - a toy compiler

这部分内容来自 LLVM 的官方文档，如下：
@example
https://llvm.org/docs/tutorial/index.html
@end example

这些代码都来自于 LLVM 源代码仓，跟 LLVM 的版本号有很大的关系，如果版本不匹配很可能会编译或者运行出错。
这里还是以llvm 12.0.1 为例，首先通过上一节的内容源码编译 llvm 12.0.1，然后通过如下命令下载代码。
@example
git clone https://gitee.com/zzyjsjcom/compiler_study.git
@end example

下面以 Chapter4 为例，介绍编译和运行的方法，首先切换到对应的目录。
@example
cd compiler_study/04_llvm_tutorial/kaleidoscope/Kaleidoscope_12.0.1/Chapter4
@end example

修改Makefile文件，把环境变量 LLVM_BIN 的值修改成你的 LLVM12 编译器所在的目录。执行make命令就可以生成可执行文件toy 了。

运行，然后做一些简单的测试，如下：
@example
$ ./toy
ready> def test(x) (1+2+x)*(x+(1+2));
ready> Read function definition:define double @@test(double %x) @{
entry:
  %addtmp = fadd double %x, 3.000000e+00
  %multmp = fmul double %addtmp, %addtmp
  ret double %multmp
@}

ready>
@end example

@node Building A JIT
@section Building A JIT
@c @node Building A JIT
@c @chapter Building A JIT

这部分内容以 Chpater1 为例做演示，通过如下命令进入 Chpater1。
@example
04_llvm_tutorial/kaleidoscope/Kaleidoscope_12.0.1/BuildingAJIT/Chapter1
@end example

运行 toy compiler。
@example
$ ./toy
ready> def testfunc(x y) x + y*2;
ready> Read function definition:define double @@testfunc(double %x, double %y) @{
entry:
  %y2 = alloca double, align 8
  %x1 = alloca double, align 8
  store double %x, double* %x1, align 8
  store double %y, double* %y2, align 8
  %x3 = load double, double* %x1, align 8
  %y4 = load double, double* %y2, align 8
  %multmp = fmul double %y4, 2.000000e+00
  %addtmp = fadd double %x3, %multmp
  ret double %addtmp
@}
@end example

@bye
